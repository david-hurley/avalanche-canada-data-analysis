# ----------------------------------------------------
# cleans raw data generated by scrape_export_data.py and save new cleaned csv file to data/cleaned
#
# author David Hurley
# email hurleyldave@gmail.com
# date October 29 2020
# ----------------------------------------------------

import pandas as pd 
import os
import json
import numpy as np

# read user inputs
with open('clean_inputs.json', 'r') as f:
    inputs = json.load(f)

### functions to help with data cleaning ###

def percent_missing(df, name):
    '''function to compute the percent NaN data in each column of a dataframe'''
    
    perc_missing = df.isna().sum() / len(df) * 100
    
    return print('Percent Missing in Each Column Before Filtering:', name, '\n \n', perc_missing, '\n')

### define paths to raw data and load raw data to environment ###

raw_data_root_path = os.path.abspath('../data/raw')  # relative to scripts folder

# raw data filenames from clean_inputs.json
current_conditions_file = inputs['current_condition_filename'] 
current_plus1_conditions_file = inputs['current_plus1_condition_filename']
current_plus2_conditions_file = inputs['current_plus2_condition_filename'] 
  
# absolute path to raw data files
current_conditions_path = os.path.join(raw_data_root_path, current_conditions_file)
current_plus1_conditions_path = os.path.join(raw_data_root_path, current_plus1_conditions_file)
current_plus2_conditions_path = os.path.join(raw_data_root_path, current_plus2_conditions_file) 

# load raw data to dataframe, parse dates as datetime index
df_raw_current = pd.read_csv(current_conditions_path, parse_dates=['date_valid'])
df_raw_current_plus1 = pd.read_csv(current_plus1_conditions_path, parse_dates=['date_valid'])
df_raw_current_plus2 = pd.read_csv(current_plus2_conditions_path, parse_dates=['date_valid'])

### clean dataset and save clean copy ###

# list of dataframes to clean
dataframes = [df_raw_current, df_raw_current_plus1, df_raw_current_plus2]

# check for percent missing values for each dataframe
for df, name in zip(dataframes, ['current', 'current+1', 'current+2']):
    percent_missing(df, name)
    
# # replace zero values with NaN and remove any row that has NaN value for avalanche status
for df in dataframes:
    df.replace(0.0, np.nan, inplace=True)
    df.dropna(subset=['alpine_status_code', 'treeline_status_code', 'belowtree_status_code'], inplace=True)
    
# remove extra columns in current day forecast if it exists
if 'Unnamed: 8' in df_raw_current.columns:
	df_raw_current.drop(columns=['Unnamed: 8'], inplace=True)

# replace missing problem text with No Text statement
df_raw_current['problems'].replace(np.nan, 'No Text', inplace=True)

# assign dataframes to new processed dataframe
df_cleaned_current = df_raw_current
df_cleaned_current_plus1 = df_raw_current_plus1
df_cleaned_current_plus2 = df_raw_current_plus2

# save cleaned dataset
df_cleaned_current.to_csv('../data/cleaned/current_avalanche_danger_ratings_{}_CLEANED.csv'.format(inputs['region']), index=False)
df_cleaned_current_plus1.to_csv('../data/cleaned/current_plus1_avalanche_danger_ratings_{}_CLEANED.csv'.format(inputs['region']), index=False)
df_cleaned_current_plus2.to_csv('../data/cleaned/current_plus2_avalanche_danger_ratings_{}_CLEANED.csv'.format(inputs['region']), index=False)

